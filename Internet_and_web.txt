1) Introduction to the Internet, programming, and Web programming

The Internet is a collection of computers that can intercommunicate. Most computers are smartphones, and there are also laptops, desktops, tablets, routers, servers, and specialized computers. Although any of these can serve any purpose, smartphones, laptops, desktops, and tablets are usually accessors of information, servers are storers of information, routers are dispatchers of data flowing between some of those other types, and specialized computers are usually measurers of information (e.g., a weather station monitoring data).

Web is the part of Internet data that can be accessed with a program called a Web browser. Web browsers are usually standalone programs that allow access to any Website (Chrome, Edge, Firefox, Opera, Safari, etc) but can also be smartphone apps that allow access only to a given Website selected by the creator of the app. The information that Web browsers use is typically stored in servers, and consists of data to be shown to the browser user, and instructions for the browser about how to present that information to the user. The server also runs special software called a Webserver in charge of controlling who is allowed access to data, whether encryption will be used to transmit the data, etc.; due to cost issues, historically several Webservers belonging to different users had to share the same server (e.g. one with her webserver about music, another with her webserver about poetry, etc); in order for browser users to be able to distinguish which particular Webserver they want to access among all the ones running in the same server, each Webserver running in a given server is assigned a unique number called a port(between 0 and 65535). When a browser gets information from some server, it needs to indicate that port; either the user indicates it, or a default one is tried.

A computer is basically a large database of symbols stored in an electronic circuit called RAM memory (e.g., 1GB means 1 thousand million symbols, where each symbol is called a byte, and has one of 256 values that are typically represented as letters, numbers, and punctuation signs), and another electronic  circuit called the CPU to move them around RAM, to check their values, and to change them (these circuits are collectively called the hardware). A set of instructions to do that kind of thing is called a program (or software). Web browsers are examples of programs.

Programming is instructing any part of the computer to do something. Programs can be targeted at controlling the CPU, or at controlling another program (like a browser). If the target is the CPU, the program must be in something called machine code, hard for humans to write and read and understand. Thus, English-based programming languages are used instead (so called high-level programming languages), and a special program called a compiler translates those into machine code. When the target to be controlled is a program, the English-based language can be used directly; this is called interpretation (interpreted language). In theory, any programming language can be compiled or interpreted, but in practice, some tend to be compiled nearly always, and others interpreted nearly always as well.

Web programming is the creation of programs that affect the information presented by browsers. This includes the creation of programs that control the browser itself (frontend Web programming), and programs controlling processes in the server that communicate with the browser (typically database management, in what is called backend programming). 

There are many English-based programming languages; the most common ones used in frontend Web development are HTML (a language to tell the browser how the author wants to structure a piece of text), CSS (a language that tells the browser how the information should be presented in the screen), and Javascript (a language that tells the browser when and how to change the information presented to the user).

The most common ones in backend Web development are Javascript, Python, SQL, Java, C++, and a long list of others (there are tens of them, many are already in disuse).

Programming is a task that typically happens between individuals that must coordinate. There are currently two main ways to coordinate programmers at work: The first way is for when the goal cannot be articulated clearly (either because it is largely irrelevant like in ad-based companies like Google, Meta, etc.: as long as people use it, whatever is created is good; or too subjective for customers to describe, like graphics-heavy work like websites, where the customer will not be able to tell if she likes something until she sees it, or where customers do not feel comfortable describing requirements for whatever reasons); these use what is called agile methodologies, which tend to skip a careful planning stage, and tend to produce little to no documentation as it is assumed that it is largely irrelevant (the reasoning goes that it does not matter too much what to build as long as it can be built reasonably fast to be tested, and it is assumed that it may be forced to change soon, so too much effort in documenting the thing may be unwarranted). The second way is for when the goal is reasonably clear at the beginning, so considerable time is spent doing planning and also comprehensive documentation is usually present, in what is called a waterfall methodology.

2) Frontend web development

We will learn HTML, CSS, and JS.
